#include <vector>
#include <iostream>

using namespace std;
#define infinite 999

int neighbors[2] = { 1,3 };
int distances[2] = { 10,5 };

struct vertex {
    int ID;
    vector<int> connections;
    vector<float> weight;
    float distance;
    int previous = -1;
    bool visited;
};


int minimumDistance(vector<vertex> list,vector<int> selection) {
    int min = list[selection[0]].ID;
    for (int i = 0; i < selection.size(); i++)
        if (list[selection[i]].distance < list[min].distance) {
            min = list[i].ID;
        }
    return min;
}


vector<int> dijkstra(vector<vertex> G, const int S, const int F) {
    vector<int> Q;
    for (int i = 0; i < G.size(); i++) {
        G[i].distance = infinite;
        Q.push_back(G[i].ID);
        G[i].visited = false;
        }

    
    G[S].distance = 0;
    G[S].previous = infinite;
    while (!G[F].visited) {
        int U = minimumDistance(G,Q);
        G[U].visited = true;

        for (int i = 0; i < G[U].connections.size(); i++)
            if (!G[G[U].connections[i]].visited) {
                float tempDistance = G[U].distance + G[U].weight[i];
                if (tempDistance <= G[G[U].connections[i]].distance) {
                    G[G[U].connections[i]].distance = tempDistance;
                    G[G[U].connections[i]].previous = U;
                    G[U].distance = infinite;

                }
            }
    }
    vector<int>re;
    re.push_back(F);
    while (re.back() != S)
        re.push_back(G[re.back()].previous);



    return re;
}
int main() {

    vector<vertex> graph;
    vertex placeholder;
    placeholder.connections.clear();
    placeholder.weight.clear();
    placeholder.ID = 0;
    placeholder.connections.push_back(2);
    placeholder.connections.push_back(3);
    placeholder.weight.push_back(2);
    placeholder.weight.push_back(5);
    graph.push_back(placeholder);

    placeholder.connections.clear();
    placeholder.weight.clear();
    placeholder.ID = 1;
    placeholder.connections.push_back(2);
    placeholder.connections.push_back(3);
    placeholder.weight.push_back(3);
    placeholder.weight.push_back(4);
    graph.push_back(placeholder);

    placeholder.connections.clear();
    placeholder.weight.clear();
    placeholder.ID = 2;
    placeholder.connections.push_back(1);
    placeholder.connections.push_back(0);
    placeholder.weight.push_back(3);
    placeholder.weight.push_back(2);
    graph.push_back(placeholder);
    placeholder.connections.clear();
    placeholder.weight.clear();
    placeholder.ID = 3;
    placeholder.connections.push_back(1);
    placeholder.connections.push_back(0);
    placeholder.weight.push_back(4);
    placeholder.weight.push_back(5);
    graph.push_back(placeholder);
    vector<int> steps = dijkstra(graph, 0, 1);

    for (int i = 0; i < steps.size(); i++) {
        std::cout << "<--" << steps[i];
    }
}
